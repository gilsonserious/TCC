{"ast":null,"code":"import { finalize } from \"rxjs/operators\";\nimport 'firebase/firestore';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/storage\";\nimport * as i2 from \"@angular/fire/compat/firestore/\";\nimport * as i3 from \"@angular/fire/compat/auth\";\nimport * as i4 from \"src/app/guards/auth-guard.service\";\nimport * as i5 from \"../../../components/cards/card-settings/card-settings.component\"; // import {AlertModalService} from '../../shared/alert-modal.service';\n// import { EventEmitter } from \"stream\";\n\nexport let SettingsComponent = /*#__PURE__*/(() => {\n  class SettingsComponent {\n    constructor(storage, afs, afAuth, auth) {\n      this.storage = storage;\n      this.afs = afs;\n      this.afAuth = afAuth;\n      this.auth = auth;\n      this._color = \"light\";\n      this.novo = false;\n      this.listar = false;\n      this.perfil = false;\n      this.dados = [];\n      this.usuarios = [];\n      this.categorias = [];\n      this.usuario = {\n        nome: null,\n        senha: null,\n        email: null,\n        imagem: null,\n        celular: null,\n        username: null,\n        uid: null\n      };\n      this.title = \"cloudsSorage\";\n      this.selectedFile = null;\n      this.opcional = null;\n    }\n\n    get color() {\n      return this._color;\n    }\n\n    set color(color) {\n      this._color = color !== \"light\" && color !== \"dark\" ? \"light\" : color;\n    }\n\n    carregar() {\n      //Listar Usuarios\n      this.afs.firestore.collection('usuarios').get().then(r => {\n        let users = [];\n        r.forEach(rr => {\n          let obj = rr.data();\n          obj['id'] = rr.id;\n          users.push(obj);\n        });\n        this.usuarios = users;\n        console.log(this.usuarios);\n      });\n    }\n\n    ngOnInit() {\n      // this.afAuth.signInAnonymously();\n      this.carregar();\n    }\n\n    testandoo(id) {\n      this.perfil = true;\n\n      var teste = cliente => cliente.uid == id;\n\n      this.dados = this.usuarios.filter(teste);\n      console.log(this.dados);\n    }\n\n    listarUsers() {\n      this.listar = true;\n    } //Upload de imagem\n\n\n    onFileSelected(event) {\n      var n = Date.now();\n      const file = event.target.files[0];\n      const filePath = `imagems/${n}`;\n      const fileRef = this.storage.ref(filePath);\n      const task = this.storage.upload(`imagems/${n}`, file);\n      task.snapshotChanges().pipe(finalize(() => {\n        this.downloadURL = fileRef.getDownloadURL();\n        this.downloadURL.subscribe(url => {\n          //Salva a URL gerada para o arquivo\n          if (url) {\n            this.fb = url;\n            this.usuario.imagem = this.fb;\n          }\n        });\n      })).subscribe(url => {\n        if (url) {\n          console.log(url);\n        }\n      });\n    }\n\n    salvar() {\n      if (this.usuario.nome && this.usuario.email && this.usuario.senha && this.usuario.username) {\n        this.auth.signup({\n          email: this.usuario.email,\n          password: this.usuario.senha\n        }).then(res => {\n          if (res.user.uid) {\n            this.carregar();\n            this.novo = false;\n            this.auth.saveDetails(this.usuario = {\n              nome: this.usuario.nome,\n              email: this.usuario.email,\n              senha: this.usuario.senha,\n              celular: this.usuario.celular,\n              imagem: this.usuario.imagem,\n              username: this.usuario.username,\n              uid: res.user.uid\n            }).then(res => {\n              alert('Conta Criada!');\n              this.usuario = {\n                nome: null,\n                email: null,\n                senha: null,\n                celular: null,\n                imagem: null,\n                username: null,\n                uid: null\n              };\n            }, err => {\n              console.log(this.auth.verificarErro(err));\n              alert(this.auth.verificarErro(err.error));\n            });\n          }\n        }, err => {\n          let str = err.toString().replace(/.*\\(|\\).*/g, '');\n          console.log(str); // Pega o que está entre parenteses\n\n          alert(this.auth.verificarErro(str));\n        });\n      } else {\n        alert('Por favor, preencha todos os campos');\n      }\n    }\n\n  }\n\n  SettingsComponent.ɵfac = function SettingsComponent_Factory(t) {\n    return new (t || SettingsComponent)(i0.ɵɵdirectiveInject(i1.AngularFireStorage), i0.ɵɵdirectiveInject(i2.AngularFirestore), i0.ɵɵdirectiveInject(i3.AngularFireAuthModule), i0.ɵɵdirectiveInject(i4.AuthGuard));\n  };\n\n  SettingsComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SettingsComponent,\n    selectors: [[\"app-settings\"]],\n    inputs: {\n      color: \"color\"\n    },\n    decls: 3,\n    vars: 0,\n    consts: [[1, \"flex\", \"flex-wrap\"], [1, \"w-full\", \"lg:w-8/12\", \"px-4\"]],\n    template: function SettingsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n        i0.ɵɵelement(2, \"app-card-settings\");\n        i0.ɵɵelementEnd()();\n      }\n    },\n    directives: [i5.CardSettingsComponent],\n    encapsulation: 2\n  });\n  return SettingsComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}